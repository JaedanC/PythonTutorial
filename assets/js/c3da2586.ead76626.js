"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[609],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1120:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={slug:"FolderSize"},l="Folder Size",i={unversionedId:"Challenges/Folder Size",id:"Challenges/Folder Size",title:"Folder Size",description:"Difficulty: \u2b50\u2b50\u2b50\u2b50",source:"@site/docs/Challenges/4. Folder Size.md",sourceDirName:"Challenges",slug:"/Challenges/FolderSize",permalink:"/PythonTutorial/docs/Challenges/FolderSize",draft:!1,editUrl:"https://github.com/JaedanC/PythonTutorial/tree/main/docs/Challenges/4. Folder Size.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"FolderSize"},sidebar:"tutorialSidebar",previous:{title:"Scam",permalink:"/PythonTutorial/docs/Challenges/Scam"},next:{title:"Tron",permalink:"/PythonTutorial/docs/Challenges/Tron"}},s={},u=[{value:"Running the program",id:"running-the-program",level:2},{value:"Command-line argument",id:"command-line-argument",level:2},{value:"OS functions",id:"os-functions",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"folder-size"},"Folder Size"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Difficulty: \u2b50\u2b50\u2b50\u2b50")),(0,a.kt)("p",null,"Default windows does not have a feature to show the sizes of folders. To implement this ourselves we must recursively query the sizes of the files inside the directory to the get the size of the folder."),(0,a.kt)("h2",{id:"running-the-program"},"Running the program"),(0,a.kt)("p",null,"Imagine you have the file structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt"},"\ud83d\udcc2mystuff\n  \u2523 \ud83d\udcdcsize.py\n  \u2523 \ud83d\udcdcdata.csv\n  \u2517 \ud83d\udcc2levels\n    \u2523 \ud83d\udcdcfirst.txt\n    \u2517 \ud83d\udcdcsecond.txt\n")),(0,a.kt)("p",null,"This is what the execution of the program would be if the working directory was ",(0,a.kt)("inlineCode",{parentName:"p"},"mystuff"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ python size.py\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\ud83d\udcc2  levels    (437000 bytes)\n\ud83d\udcdc  data.csv  (256 bytes)\n\ud83d\udcdc  size.py   (15 bytes)\n")),(0,a.kt)("h2",{id:"command-line-argument"},"Command-line argument"),(0,a.kt)("p",null,"An optional command-line argument can be added which will instead choose which folder on your computer to read from:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ python size.py levels\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\ud83d\udcdc  first.txt   (400000 bytes)\n\ud83d\udcdc  second.txt  (37000 bytes)\n")),(0,a.kt)("p",null,"If the command-line argument directory does not exist instead print:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Directory does not exist\n")),(0,a.kt)("p",null,"If the command-line argument directory is not a directory, but instead a file print:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Selected file is not a directory\n")),(0,a.kt)("p",null,"If the folder is empty, print:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Folder is empty\n")),(0,a.kt)("h2",{id:"os-functions"},"OS functions"),(0,a.kt)("p",null,"These are some functions that will be useful in this challenge:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"os.walk()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"os.stat()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"os.path.abspath()"))),(0,a.kt)("p",null,"Obtaining the sizes of directories requires you to recursively sum the size of the files and directories inside said directory."),(0,a.kt)("p",null,"Any other details are free to be interpreted. This program aims to challenge you to use a library not covered in the tutorials. This challenge is hard to complete without recursion."))}d.isMDXComponent=!0}}]);